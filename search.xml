<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/2023/01/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><p>从今天起，正式开始写博客啦。这次用hexo搭建博客还有许多要完善的地方。一些小的细节方面后续也会持续改进。最近其实还是比较忙的，这次也算是一个总结和记录吧（虽说也没有做啥总结）。总之，依然要做好安排，不断学习，不断进步。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Start</title>
    <url>/2023/01/08/Start/</url>
    <content><![CDATA[<h2 id="1月8日记录"><a href="#1月8日记录" class="headerlink" title="1月8日记录"></a>1月8日记录</h2><p>今天用hexo框架搭建了属于自己的博客，还是很开心的，虽然遇到了许多困难，但是我还是一步一步的实现了自己的博客。感觉很开心。也希望自己以后不断学习，不断提高自己的技术，在IT的旅途上追逐梦想，扬帆起航。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习记录1</title>
    <url>/2023/01/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
    <content><![CDATA[<h1 id="串和广义表"><a href="#串和广义表" class="headerlink" title="串和广义表"></a>串和广义表</h1><h3 id="串的定义和运算"><a href="#串的定义和运算" class="headerlink" title="串的定义和运算"></a>串的定义和运算</h3><p>1.串是由零个或任意多个字符组成的有限序列<br>2.子串是串中任意连续的字符组成的子序列<br>注：空串是任意串的子串，任意串是自身的子串<br>3.模式匹配是一种求子串在主串中第一次出现的第一个字符的位置<br>4.串的操作有很多种，比如赋值，复制，求串的长度，串的连接，插入删除等等<br>5.串的存储结构有顺序存储和链式存储<br>6.在实际应用中，可以采用堆分配存储（动态存储）<br>堆分配存储的方法：<br>（1）开辟一块地址连续的存储空间，该存储空间称为“堆”<br>（2）建立一个索引表，用来存储串的名字，长度和该串在堆中的起始位置<br>（3）程序执行过程中，每产生一个串，系统就从堆中分配一块大小和串长度相等的连续空间，用来存储该串的值，并且在索引表中增加一个索引项，用于记录串的信息。</p>
<h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><p>1.广义表是n个数据元素的有序序列，它是线性表的推广，也称为“列表”<br>2.广义表是一种多层次的数据结构，其中的元素可以是单元素，也可以是子表<br>3.广义表可以是递归的表，即它可以是自身的子表<br>4.广义表可以被其他表所共享<br>5.广义表常采用链式存储结构，有头尾表示法和孩子兄弟表示法两种存储方式</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习纪录2</title>
    <url>/2023/01/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%BA%AA%E5%BD%952/</url>
    <content><![CDATA[<h1 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h1><h3 id="树的定义："><a href="#树的定义：" class="headerlink" title="树的定义："></a>树的定义：</h3><p>1.树是n（n&gt;&#x3D;0）个有限数据元素的集合。</p>
<p>2.树满足的条件：</p>
<p>（1）有且仅有一个根节点</p>
<p>（2）其余的节点分为m（m&gt;&#x3D;0）个互不相交的非空集合，其中每个集合本身就是一棵树，称为根的子树</p>
<h3 id="树的表示方法："><a href="#树的表示方法：" class="headerlink" title="树的表示方法："></a>树的表示方法：</h3><p>1.树形表示法</p>
<p>2.嵌套集合表示法</p>
<p>3.凹入表示法</p>
<p>4.广义表示法</p>
<h3 id="树的基本术语："><a href="#树的基本术语：" class="headerlink" title="树的基本术语："></a>树的基本术语：</h3><p>1.结点：树的结点包含一个数据元素及若干指向其子树的分支</p>
<p>2.结点的度：结点所拥有的分支数目或后继结点个数</p>
<p>3.树的度：树中各结点度的最大值</p>
<p>4.叶子（终端结点）：度为零的结点称为叶子结点</p>
<p>5.分支（非终端结点）：度不为零的结点</p>
<p>6.孩子结点：一个结点的后继称为该结点的孩子结点</p>
<p>7.双亲结点：一个结点是其后继结点的双亲节点</p>
<p>8.兄弟结点：同一个双亲结点下的孩子节点互称为兄弟结点</p>
<p>9.堂兄弟：双亲互为兄弟的两个结点互称为堂兄弟</p>
<p>10.子孙结点：一个结点的所有子树的结点</p>
<p>11.祖先结点：从树根结点到达一个结点路径上的所有结点称为该结点的祖先结点</p>
<p>12.结点的层次：根结点的层次为1，其余结点的层次等于它双亲结点的层次加一</p>
<p>13.树的深度：树中结点的最大层次称为树的深度（或高度）</p>
<p>14.有序树、无序树：交换某结点各子树的相对位置，会构成不同的树，这样的树称为有序树，反之则是无序树</p>
<p>15.森林：m（m&gt;&#x3D;0）棵互不相交的树的集合</p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>1.二叉树是有n（n&gt;&#x3D;0）个结点的有限集合，该集合或者为空，或者由一个根结点及两个不相交的子树组成（左子树和右子树）</p>
<p>2.左子树和右子树同样都是二叉树</p>
<p>3.二叉树是特殊的有序树</p>
<p>4.二叉树的性质：</p>
<p>（1）在二叉树的第i层至多有2^(i-1)个结点</p>
<p>（2）深度为h的二叉树中至多有(2^h) - 1结点</p>
<p>（3）对任意一棵二叉树T，如果其叶子结点数为n0，度为2的结点数为n2，则有n0 &#x3D; n2 + 1</p>
<p>（4）具有n个结点的完全二叉树的深度为log2n（以2为底的对数） + 1</p>
<p>（5）如果一棵n个结点的完全二叉树的结点按层次有：</p>
<p>如果i&#x3D;1，结点i是根结点，无双亲；如果i&gt;1。则其双亲结点是结点i&#x2F;2</p>
<p>如果2i&gt;n，则结点i无左孩子，该结点为叶子结点；否则其左孩子是结点2i</p>
<p>如果2i+1&gt;n，则结点i无右孩子，该结点为叶子结点；否则其右孩子是结点2i+1</p>
<p>5.二叉树的存储结构：</p>
<p>（1）顺序存储</p>
<p>（2）链式存储</p>
<p>6.二叉树的遍历方式：</p>
<p>（1）先序遍历：根—-左—–右</p>
<p>（2）中序遍历：左—-根—-右</p>
<p>（3）后序遍历：左—-右—-根</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
