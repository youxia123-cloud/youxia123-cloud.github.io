<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/2023/01/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><p>从今天起，正式开始写博客啦。这次用hexo搭建博客还有许多要完善的地方。一些小的细节方面后续也会持续改进。最近其实还是比较忙的，这次也算是一个总结和记录吧（虽说也没有做啥总结）。总之，依然要做好安排，不断学习，不断进步。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Start</title>
    <url>/2023/01/08/Start/</url>
    <content><![CDATA[<h2 id="1月8日记录"><a href="#1月8日记录" class="headerlink" title="1月8日记录"></a>1月8日记录</h2><p>今天用hexo框架搭建了属于自己的博客，还是很开心的，虽然遇到了许多困难，但是我还是一步一步的实现了自己的博客。感觉很开心。也希望自己以后不断学习，不断提高自己的技术，在IT的旅途上追逐梦想，扬帆起航。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习记录1</title>
    <url>/2023/01/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
    <content><![CDATA[<h1 id="串和广义表"><a href="#串和广义表" class="headerlink" title="串和广义表"></a>串和广义表</h1><h3 id="串的定义和运算"><a href="#串的定义和运算" class="headerlink" title="串的定义和运算"></a>串的定义和运算</h3><p>1.串是由零个或任意多个字符组成的有限序列<br>2.子串是串中任意连续的字符组成的子序列<br>注：空串是任意串的子串，任意串是自身的子串<br>3.模式匹配是一种求子串在主串中第一次出现的第一个字符的位置<br>4.串的操作有很多种，比如赋值，复制，求串的长度，串的连接，插入删除等等<br>5.串的存储结构有顺序存储和链式存储<br>6.在实际应用中，可以采用堆分配存储（动态存储）<br>堆分配存储的方法：<br>（1）开辟一块地址连续的存储空间，该存储空间称为“堆”<br>（2）建立一个索引表，用来存储串的名字，长度和该串在堆中的起始位置<br>（3）程序执行过程中，每产生一个串，系统就从堆中分配一块大小和串长度相等的连续空间，用来存储该串的值，并且在索引表中增加一个索引项，用于记录串的信息。</p>
<h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><p>1.广义表是n个数据元素的有序序列，它是线性表的推广，也称为“列表”<br>2.广义表是一种多层次的数据结构，其中的元素可以是单元素，也可以是子表<br>3.广义表可以是递归的表，即它可以是自身的子表<br>4.广义表可以被其他表所共享<br>5.广义表常采用链式存储结构，有头尾表示法和孩子兄弟表示法两种存储方式</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习纪录2</title>
    <url>/2023/01/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%BA%AA%E5%BD%952/</url>
    <content><![CDATA[<h1 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h1><h3 id="树的定义："><a href="#树的定义：" class="headerlink" title="树的定义："></a>树的定义：</h3><p>1.树是n（n&gt;&#x3D;0）个有限数据元素的集合。</p>
<p>2.树满足的条件：</p>
<p>（1）有且仅有一个根节点</p>
<p>（2）其余的节点分为m（m&gt;&#x3D;0）个互不相交的非空集合，其中每个集合本身就是一棵树，称为根的子树</p>
<h3 id="树的表示方法："><a href="#树的表示方法：" class="headerlink" title="树的表示方法："></a>树的表示方法：</h3><p>1.树形表示法</p>
<p>2.嵌套集合表示法</p>
<p>3.凹入表示法</p>
<p>4.广义表示法</p>
<h3 id="树的基本术语："><a href="#树的基本术语：" class="headerlink" title="树的基本术语："></a>树的基本术语：</h3><p>1.结点：树的结点包含一个数据元素及若干指向其子树的分支</p>
<p>2.结点的度：结点所拥有的分支数目或后继结点个数</p>
<p>3.树的度：树中各结点度的最大值</p>
<p>4.叶子（终端结点）：度为零的结点称为叶子结点</p>
<p>5.分支（非终端结点）：度不为零的结点</p>
<p>6.孩子结点：一个结点的后继称为该结点的孩子结点</p>
<p>7.双亲结点：一个结点是其后继结点的双亲节点</p>
<p>8.兄弟结点：同一个双亲结点下的孩子节点互称为兄弟结点</p>
<p>9.堂兄弟：双亲互为兄弟的两个结点互称为堂兄弟</p>
<p>10.子孙结点：一个结点的所有子树的结点</p>
<p>11.祖先结点：从树根结点到达一个结点路径上的所有结点称为该结点的祖先结点</p>
<p>12.结点的层次：根结点的层次为1，其余结点的层次等于它双亲结点的层次加一</p>
<p>13.树的深度：树中结点的最大层次称为树的深度（或高度）</p>
<p>14.有序树、无序树：交换某结点各子树的相对位置，会构成不同的树，这样的树称为有序树，反之则是无序树</p>
<p>15.森林：m（m&gt;&#x3D;0）棵互不相交的树的集合</p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>1.二叉树是有n（n&gt;&#x3D;0）个结点的有限集合，该集合或者为空，或者由一个根结点及两个不相交的子树组成（左子树和右子树）</p>
<p>2.左子树和右子树同样都是二叉树</p>
<p>3.二叉树是特殊的有序树</p>
<p>4.二叉树的性质：</p>
<p>（1）在二叉树的第i层至多有2^(i-1)个结点</p>
<p>（2）深度为h的二叉树中至多有(2^h) - 1结点</p>
<p>（3）对任意一棵二叉树T，如果其叶子结点数为n0，度为2的结点数为n2，则有n0 &#x3D; n2 + 1</p>
<p>（4）具有n个结点的完全二叉树的深度为log2n（以2为底的对数） + 1</p>
<p>（5）如果一棵n个结点的完全二叉树的结点按层次有：</p>
<p>如果i&#x3D;1，结点i是根结点，无双亲；如果i&gt;1。则其双亲结点是结点i&#x2F;2</p>
<p>如果2i&gt;n，则结点i无左孩子，该结点为叶子结点；否则其左孩子是结点2i</p>
<p>如果2i+1&gt;n，则结点i无右孩子，该结点为叶子结点；否则其右孩子是结点2i+1</p>
<p>5.二叉树的存储结构：</p>
<p>（1）顺序存储</p>
<p>（2）链式存储</p>
<p>6.二叉树的遍历方式：</p>
<p>（1）先序遍历：根—-左—–右</p>
<p>（2）中序遍历：左—-根—-右</p>
<p>（3）后序遍历：左—-右—-根</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习记录1</title>
    <url>/2023/01/19/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
    <content><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h3 id="一、选择排序"><a href="#一、选择排序" class="headerlink" title="一、选择排序"></a>一、选择排序</h3><p>1.每一趟从待排序的数据元素中选择最小（或最大）的一个元素，顺序放在待排序的数组最前面，直到数据元素全部排完为止。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">1001</span>;</span><br><span class="line"><span class="type">int</span> a[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,k,i,j;</span><br><span class="line">	<span class="type">int</span> temp;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">		k = i;</span><br><span class="line">		<span class="keyword">for</span>(j = i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[j]&lt;a[k]) k = j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(k!=i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = a[i];</span><br><span class="line">			a[i] = a[k];</span><br><span class="line">			a[k] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="二、冒泡排序"><a href="#二、冒泡排序" class="headerlink" title="二、冒泡排序"></a>二、冒泡排序</h3><p>1.n个数据元素，从第一个开始，依次比较相邻的两个是否顺序，如果不满足就交换。直到n-1和n相比，经过n-1轮后，得到有序的队列</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">10001</span>; </span><br><span class="line"><span class="type">int</span> a[MAX];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">bool</span> flag;</span><br><span class="line">	<span class="type">int</span> n,j;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)  <span class="comment">//n-1轮冒泡排序</span></span><br><span class="line">	&#123;</span><br><span class="line">		flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)  <span class="comment">//进行i次的比较</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">swap</span>(a[j],a[j+<span class="number">1</span>]);</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;  <span class="comment">//没有进行交换，直接退出循环</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a>三、插入排序</h3><p>1.当读入一个数据元素时，在已经排序好的序列中，寻找它正确的位置放入。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX=<span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,i,j,k,temp;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[j]&lt;a[i]) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(j!=i<span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="comment">//TODO</span></span><br><span class="line">			temp = a[i];</span><br><span class="line">			<span class="keyword">for</span>(k=i<span class="number">-1</span>;k&gt;j;k--)</span><br><span class="line">				a[k+<span class="number">1</span>] = a[k];</span><br><span class="line">			a[k+<span class="number">1</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="四、桶排序"><a href="#四、桶排序" class="headerlink" title="四、桶排序"></a>四、桶排序</h3><p>1.若待排序的值在一个明显有限的范围内，可设计有限个有序桶，待排序的值装入相对应的桶，顺序输出各桶的值就可以得到有序的序列。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> b[<span class="number">101</span>],n,i,k;</span><br><span class="line">	<span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="built_in">sizeof</span>(b));</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;k;</span><br><span class="line">		b[k]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(b[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="comment">//TODO</span></span><br><span class="line">			cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">			b[i]--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="五、快速排序"><a href="#五、快速排序" class="headerlink" title="五、快速排序"></a>五、快速排序</h3><p>1.快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将待排序的序列分为两部分，其中一部分中的每一个数都比另一部分小，则可以对这两部分继续进行排序，最终使得整个序列有序。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> x = q[l],i = l<span class="number">-1</span>,j =r+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">		<span class="keyword">do</span> i++;<span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">		<span class="keyword">do</span> j--;<span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">		<span class="keyword">if</span>(i&lt;j) <span class="built_in">swap</span>(q[i],q[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">quick_sort</span>(q,l,j);</span><br><span class="line">	<span class="built_in">quick_sort</span>(q,j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">quick_sort</span>(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="六、归并排序"><a href="#六、归并排序" class="headerlink" title="六、归并排序"></a>六、归并排序</h3><p>1.归并排序算法采用的是分治算法,即把两个(或两个以上)有序表合并成一个新的有序表,把待排序的序列分成若干个子序列,每个子序列都是有序的,然后把有序子序列合并成整体有序序列 。若将两个有序表合并成一个有序表，称为二路归并。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">100001</span>;</span><br><span class="line"><span class="type">int</span> a[MAX];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> low,<span class="type">int</span> mid,<span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = low,j = mid + <span class="number">1</span>,k = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> *temp = <span class="keyword">new</span> <span class="type">int</span> [high-low+<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=high)&#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">		<span class="keyword">if</span>(arr[i]&lt;=arr[j])</span><br><span class="line">		&#123;</span><br><span class="line">			temp[k++] = arr[i++]; <span class="comment">//较小的哪一个先存入temp数组中</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			temp[k++] = arr[j++];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">		temp[k++] = arr[i++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(j&lt;=high)&#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">		temp[k++] = arr[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=low,k=<span class="number">0</span>;i&lt;=high;i++,k++)</span><br><span class="line">		arr[i] = temp[k];</span><br><span class="line">	<span class="keyword">delete</span> []temp; <span class="comment">//释放数组空间，必须用delete[]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> low,<span class="type">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(low &gt;= high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">MergeSort</span>(arr,low,mid);</span><br><span class="line">		<span class="built_in">MergeSort</span>(arr,mid+<span class="number">1</span>,high);</span><br><span class="line">		<span class="built_in">Merge</span>(arr,low,mid,high);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">MergeSort</span>(a,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习记录3</title>
    <url>/2023/01/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</url>
    <content><![CDATA[<h1 id="图结构"><a href="#图结构" class="headerlink" title="图结构"></a>图结构</h1><h3 id="图的定义："><a href="#图的定义：" class="headerlink" title="图的定义："></a>图的定义：</h3><p>1.图是一个由非空的顶点集合和一个描述顶点之间的关系即边（Edges）的有限集合组成的一种数据结构。</p>
<p>可以定义为一个二元组：</p>
<p>G&#x3D;（V,E）</p>
<p>V是顶点集合，E是边的集合</p>
<p>2.按照图中的边是否有方向，图分为有向图和无向图两类</p>
<h3 id="图的相关术语："><a href="#图的相关术语：" class="headerlink" title="图的相关术语："></a>图的相关术语：</h3><p>（1）无向图：在一个图中，每条边都没有方向</p>
<p>（2）有向图：在一个图中，每条边都有方向</p>
<p>（3）无向完全图：在一个无向图中，任意两个顶点都有一条直接边相连。在一个含有n个顶点的无向完全图中，有（n-1）n&#x2F;2 条边</p>
<p>（4）有向完全图：在一个有向图中，任意两顶点之间都有方向互为相反的两条弧相连接</p>
<p>（5）顶点的度：一个顶点所拥有的边数</p>
<p>（6）顶点的入度：在有向图中，一个顶点拥有的弧头的数目</p>
<p>（7）顶点的出度：在有向图中，一个顶点拥有的弧尾的数目</p>
<p>一个顶点的度 &#x3D;  顶点的入度 + 顶点的出度</p>
<p>（8）权：图的边或弧有时具有与它相关的数据信息，这个数据信息称为权（权重）</p>
<p>（9）网：带权的图称为网，同样可以分为有向网和无向网</p>
<p>（10）回路或环：在一个路径中，若其第一个顶点和最后一个顶点是相同的，则称该路径为一个回路或环</p>
<p>（11）简单路径：表示路径的顶点序列中的顶点各不相同</p>
<p>（12）简单回路：除了第一个和最后一个顶点之外，其余各顶点均不重复出现</p>
<p>（13）稀疏图：有很少条边的图称为稀疏图</p>
<p>（14）连通图：无向图中，任意两个顶点都是连通的图称为连通图。无向图的极大连通子图称为连通分量</p>
<p>（15）强连通图：对于有向图来说，图中任意一对顶点Vi和Vj均有从一个顶点Vi到另一个顶点Vj有路径，也有从Vj到Vi的路径，则称该有向图是强连通图。有向图的极大强连通子图称为强连通分量</p>
<p>（16）生成树：连通图G的一个子图如果是一棵包含G的所有顶点的树，则该子图称为G的生成树</p>
<h3 id="图的存储结构："><a href="#图的存储结构：" class="headerlink" title="图的存储结构："></a>图的存储结构：</h3><p>（1）邻接矩阵</p>
<p>（2）邻接表</p>
<h3 id="图的遍历："><a href="#图的遍历：" class="headerlink" title="图的遍历："></a>图的遍历：</h3><p>1.深度优先搜索（DFS）</p>
<p>2.广度优先搜索（BFS）</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习记录2</title>
    <url>/2023/01/20/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%952/</url>
    <content><![CDATA[<h1 id="搜索与回溯"><a href="#搜索与回溯" class="headerlink" title="搜索与回溯"></a>搜索与回溯</h1><h3 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（DFS）</h3><p>1.深度优先搜索类似于树的先序遍历，是树的先序遍历的推广</p>
<p>2.深度优先搜索方法：</p>
<p>（1）首先从图中某个顶点v出发，首先访问此顶点，将其标记为已经访问</p>
<p>（2）任选一个v的未被访问的邻接点w出发，继续进行深度优先搜索</p>
<p>（3）直到图中所有和v路径想通的顶点被访问到</p>
<p>（4）若此时还有顶点未访问，则选另一个顶点作为起始点，重复上述步骤，直到所有的顶点都被访问为止。</p>
<h3 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h3><ol>
<li>广度优先搜索类似于树的按层次遍历</li>
<li>广度优先搜索的思想：</li>
</ol>
<p>（1）从图中的某一个顶点V0开始，访问V0，</p>
<p>（2）访问与V0相邻接的顶点V1，V2，……Vt</p>
<p>（3）依次访问与V1，V2，……..Vt相邻接的点</p>
<p>（4）循环进行，直到所有的顶点都被访问</p>
<h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><p>1.回溯法是从初始状出发，按照深度优先搜索的方式，根据产生子结点的条件约束，搜索问题的解。当发现当前节点满足不了求解条件时，就回溯，尝试其他的路径。</p>
<p>注：在搜索中，常采用剪枝的策略进行优化</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习记录3</title>
    <url>/2023/01/21/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%953/</url>
    <content><![CDATA[<h1 id="贪心和分治"><a href="#贪心和分治" class="headerlink" title="贪心和分治"></a>贪心和分治</h1><h3 id="一、贪心算法"><a href="#一、贪心算法" class="headerlink" title="一、贪心算法"></a>一、贪心算法</h3><p>1.选择贪心策略，根据贪心策略，一步一步地得到局部最优解，最后把所有的局部最优解合成原来问题的一个最优解。</p>
<p>2.基本思路：</p>
<p>（1）建立数学模型来描述问题</p>
<p>（2）把求解的问题分成若干个子问题</p>
<p>（3）对每一个子问题求解，得到子问题的局部最优解</p>
<p>（4）把子问题的局部最优解合成原来问题的一个解</p>
<p>3.适用的问题：</p>
<p>局部最优的策略能导致产生全局最优解</p>
<h3 id="二、分治算法"><a href="#二、分治算法" class="headerlink" title="二、分治算法"></a>二、分治算法</h3><p>1.所谓分治，就是分而治之，将大规模的问题分解成几个小规模的问题。通过求解小规模的问题来求出大规模问题的解。</p>
<p>2.当我们将问题分解成两个较小问题求解时的分治称为二分法</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
